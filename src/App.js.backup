import logo from './logo.svg';
import './App.css';

import Header from './components/Header'
import QImage from './components/QImage'
import Concept from './components/Concept'

import React from 'react'
import 'bootstrap/dist/css/bootstrap.css';
import ProgressBar from 'react-bootstrap/ProgressBar';
import Image from 'react-bootstrap/Image';
import Card from 'react-bootstrap/Card';
import CustomNavbar from './components/CustomNavbar';
import { CountdownCircleTimer } from 'react-countdown-circle-timer'
import FigureImage from 'react-bootstrap/FigureImage'
import Figure from 'react-bootstrap/Figure';
import { useSpeechSynthesis,useSpeechRecognition } from 'react-speech-kit';
import { useState } from 'react';
import Button from 'react-bootstrap/Button';
import 'bootstrap/dist/css/bootstrap.min.css'

let readQuestion=true;
let spokenText=''
const App = () => {
  const progress=60
  const progressLabel ='60%'
  const question='Welcome to React Native'
  
  const [lang, setLang] = useState('en-AU');
  const [value, setValue] = useState('');
  const [blocked, setBlocked] = useState(false);
  let SpokenLang='en-AU'
  let spoken =false
  const { speak,speaking} = useSpeechSynthesis();
  
  const onEnd = () => {
    // You could do something here after listening has finished
  };

  const onResult = (result) => {
    setValue(result);
  };

  const changeLang = (event) => {
    setLang(event.target.value);
  };

  const onError = (event) => {
    if (event.error === 'not-allowed') {
      setBlocked(true);
    }
  };

  const { listen, listening, stop, supported } = useSpeechRecognition({
    onResult,
    onEnd,
    onError,
  });


  const stopListen=()=>{
  console.log('stopping to listen')
  }


  const SpeakListen=()=>{
  if (readQuestion)
  {
  speak({text:question})
  readQuestion=false
  }
  }

  const toggle = listening
  ? stop
  : () => {
      setBlocked(false);
      listen({ SpokenLang });
    };



  return (
    <div className='parent'>
    <CustomNavbar />
  <div className='container2'>
  <Figure  style={{flex:1,marginLeft:10}}>
   <Figure.Image
      width={100}
      height={100}
      src={require('./assets/teacher.png').default }
    />
    <Figure.Caption>
        Teacher:Mike Scott (XII Biology)
    </Figure.Caption>
  </Figure>

  <Card style={{flex:1,marginLeft:10,height:100}} bg='light'>
    <Card.Body>
      <h4>ABC School XII Class</h4>
    </Card.Body>
  </Card>

  <Card style={{flex:1,marginLeft:10,height:100,marginRight:10}} bg='light'>
       <Card.Body >
         <h4>Biology-Cell Structure</h4>
       </Card.Body>
   </Card>

  
  <Card style={{flex:1,marginLeft:10,height:100,marginRight:10}} bg='info'>
       <Card.Body >
          <h4>Question 6/10</h4>
         
       </Card.Body>
   </Card>

   <Card style={{flex:1,marginLeft:10,height:100,marginRight:10}} bg='light'>
       <Card.Body >
          <h4>Progress :60%</h4>
         
       </Card.Body>
   </Card>


  
   <div>

   <CountdownCircleTimer
      isPlaying
      duration={60}
      size={100}
      colors={[
      ['#004777', 0.33],
      ['#F7B801', 0.33],
      ['#A30000', 0.33],
    ]}
    onComplete={stopListen}
    style={{flex:1,marginLeft:20}}
    >
      {({ remainingTime }) => remainingTime}
    </CountdownCircleTimer>

   </div>
   
    </div>
    <div className='container1'>
    <QImage />
    <Concept transcript={value}/>
    </div>
    
    {SpeakListen()}
    {()=>listen}
    {/* {StartListening()} */}
    <div className='container3'>  
    <Button onClick={()=>speak({text:question})} size="lg" variant="secondary" >Repeat the question(audio)</Button>
    <Button size="lg" variant="secondary" onClick={toggle}>Listen/Stop</Button>
    <Button size="lg" variant="primary">Submit</Button >
    <Button size="lg" variant="primary">Skip</Button >
    </div>
    </div>

  )
}

export default App


